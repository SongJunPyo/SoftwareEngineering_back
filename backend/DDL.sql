-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.activity_logs
(
    log_id serial NOT NULL,
    user_id integer,
    user_name text COLLATE pg_catalog."default",
    entity_type text COLLATE pg_catalog."default" NOT NULL,
    entity_id integer NOT NULL,
    action text COLLATE pg_catalog."default" NOT NULL,
    project_id integer,
    project_name text COLLATE pg_catalog."default",
    details text COLLATE pg_catalog."default",
    "timestamp" timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT activity_logs_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.comments
(
    comment_id serial NOT NULL,
    user_id integer,
    task_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    updated_at timestamp without time zone NOT NULL DEFAULT now(),
    is_updated integer NOT NULL DEFAULT 0,
    CONSTRAINT comments_pkey PRIMARY KEY (comment_id)
);

CREATE TABLE IF NOT EXISTS public.files
(
    file_id serial NOT NULL,
    user_id integer,
    task_id integer,
    comment_id integer NOT NULL,
    file_name text COLLATE pg_catalog."default" NOT NULL,
    file_url text COLLATE pg_catalog."default" NOT NULL,
    mime_type text COLLATE pg_catalog."default",
    file_size bigint,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT files_pkey PRIMARY KEY (file_id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id serial NOT NULL,
    user_id integer NOT NULL,
    type text COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    channel text COLLATE pg_catalog."default" NOT NULL,
    is_read boolean NOT NULL DEFAULT false,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    related_id integer,
    CONSTRAINT notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.project_invitations
(
    project_inv_id serial NOT NULL,
    project_id integer NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    invited_by integer,
    status invitation_status NOT NULL DEFAULT 'pending'::invitation_status,
    accepted_at timestamp without time zone,
    role invitation_role NOT NULL DEFAULT 'member'::invitation_role,
    invited_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT project_invitations_pkey PRIMARY KEY (project_inv_id)
);

CREATE TABLE IF NOT EXISTS public.project_members
(
    project_id integer,
    user_id integer,
    role character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'contributor'::character varying,
    notify_email boolean NOT NULL DEFAULT false
);

CREATE TABLE IF NOT EXISTS public.projects
(
    project_id serial NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'active'::text,
    owner_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    updated_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT projects_pkey PRIMARY KEY (project_id)
);

CREATE TABLE IF NOT EXISTS public.tags
(
    project_id integer NOT NULL,
    tag_name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tags_pkey PRIMARY KEY (project_id, tag_name)
);

CREATE TABLE IF NOT EXISTS public.task_members
(
    task_id integer NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT task_members_pkey PRIMARY KEY (task_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.task_tags
(
    task_id integer NOT NULL,
    tag_name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT task_tags_pkey PRIMARY KEY (task_id, tag_name)
);

CREATE TABLE IF NOT EXISTS public.tasks
(
    task_id serial NOT NULL,
    project_id integer NOT NULL,
    parent_task_id integer,
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    assignee_id integer NOT NULL,
    priority text COLLATE pg_catalog."default" NOT NULL DEFAULT 'medium'::text,
    due_date date NOT NULL DEFAULT CURRENT_DATE,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'todo'::text,
    updated_at timestamp without time zone NOT NULL DEFAULT now(),
    start_date date NOT NULL DEFAULT CURRENT_DATE,
    CONSTRAINT tasks_pkey PRIMARY KEY (task_id)
);

CREATE TABLE IF NOT EXISTS public.user_setting
(
    user_id integer NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    nickname text COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    img_path text COLLATE pg_catalog."default",
    CONSTRAINT user_setting_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    role text COLLATE pg_catalog."default" NOT NULL DEFAULT 'member'::text,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    updated_at timestamp without time zone NOT NULL DEFAULT now(),
    provider character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'local'::character varying,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.workspace_project_order
(
    workspace_id integer NOT NULL,
    project_id integer NOT NULL,
    project_order integer NOT NULL,
    CONSTRAINT wpo_pkey PRIMARY KEY (workspace_id, project_id)
);

CREATE TABLE IF NOT EXISTS public.workspaces
(
    workspace_id serial NOT NULL,
    user_id integer NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    "order" integer DEFAULT 0,
    CONSTRAINT workspaces_pkey PRIMARY KEY (workspace_id)
);

ALTER TABLE IF EXISTS public.activity_logs
    ADD CONSTRAINT activity_logs_project_id_fkey FOREIGN KEY (project_id)
    REFERENCES public.projects (project_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.activity_logs
    ADD CONSTRAINT activity_logs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.tasks (task_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.files
    ADD CONSTRAINT files_comment_id_fkey FOREIGN KEY (comment_id)
    REFERENCES public.comments (comment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.files
    ADD CONSTRAINT files_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.tasks (task_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.files
    ADD CONSTRAINT files_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.project_invitations
    ADD CONSTRAINT project_invitations_invited_by_fkey FOREIGN KEY (invited_by)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.project_invitations
    ADD CONSTRAINT project_invitations_project_id_fkey FOREIGN KEY (project_id)
    REFERENCES public.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.project_members
    ADD CONSTRAINT project_member_pro_id FOREIGN KEY (project_id)
    REFERENCES public.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS project_users_project_id_idx
    ON public.project_members(project_id);


ALTER TABLE IF EXISTS public.project_members
    ADD CONSTRAINT project_member_usr_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS project_users_user_id_idx
    ON public.project_members(user_id);


ALTER TABLE IF EXISTS public.projects
    ADD CONSTRAINT projects_owner_id_fkey FOREIGN KEY (owner_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.tags
    ADD CONSTRAINT tags_project_id_fkey FOREIGN KEY (project_id)
    REFERENCES public.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.task_members
    ADD CONSTRAINT task_members_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.tasks (task_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.task_members
    ADD CONSTRAINT task_members_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.

    ADD CONSTRAINT task_tags_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.tasks (task_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT tasks_assignee_id_fkey FOREIGN KEY (assignee_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT tasks_parent_task_id_fkey FOREIGN KEY (parent_task_id)
    REFERENCES public.tasks (task_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT tasks_project_id_fkey FOREIGN KEY (project_id)
    REFERENCES public.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_setting
    ADD CONSTRAINT user_setting_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS user_setting_pkey
    ON public.user_setting(user_id);


ALTER TABLE IF EXISTS public.workspace_project_order
    ADD CONSTRAINT wpo_project_fkey FOREIGN KEY (project_id)
    REFERENCES public.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workspace_project_order
    ADD CONSTRAINT wpo_workspace_fkey FOREIGN KEY (workspace_id)
    REFERENCES public.workspaces (workspace_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workspaces
    ADD CONSTRAINT workspaces_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;